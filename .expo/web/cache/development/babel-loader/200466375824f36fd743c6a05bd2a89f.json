{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useNavigationCache;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _routers = require(\"@react-navigation/routers\");\n\nvar _excluded = [\"emit\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useNavigationCache(_ref) {\n  var state = _ref.state,\n      getState = _ref.getState,\n      navigation = _ref.navigation,\n      _setOptions = _ref.setOptions,\n      router = _ref.router,\n      emitter = _ref.emitter;\n  var cache = React.useMemo(function () {\n    return {\n      current: {}\n    };\n  }, [getState, navigation, _setOptions, router, emitter]);\n  var actions = Object.assign({}, router.actionCreators, _routers.CommonActions);\n  cache.current = state.routes.reduce(function (acc, route) {\n    var previous = cache.current[route.key];\n\n    if (previous) {\n      acc[route.key] = previous;\n    } else {\n      var emit = navigation.emit,\n          rest = (0, _objectWithoutProperties2.default)(navigation, _excluded);\n\n      var dispatch = function dispatch(action) {\n        var payload = typeof action === 'function' ? action(getState()) : action;\n        navigation.dispatch(typeof payload === 'object' && payload != null ? Object.assign({\n          source: route.key\n        }, payload) : payload);\n      };\n\n      var helpers = Object.keys(actions).reduce(function (acc, name) {\n        acc[name] = function () {\n          return dispatch(actions[name].apply(actions, arguments));\n        };\n\n        return acc;\n      }, {});\n      acc[route.key] = Object.assign({}, rest, helpers, emitter.create(route.key), {\n        dispatch: dispatch,\n        setOptions: function setOptions(options) {\n          return _setOptions(function (o) {\n            return Object.assign({}, o, (0, _defineProperty2.default)({}, route.key, Object.assign({}, o[route.key], options)));\n          });\n        },\n        isFocused: function isFocused() {\n          var state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          return navigation ? navigation.isFocused() : true;\n        }\n      });\n    }\n\n    return acc;\n  }, {});\n  return cache.current;\n}","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;;AACA;;;;;;;;AAmCe,SAASA,kBAAT,OAUI;EAAA,IANjBC,KAMiB,QANjBA,KAMiB;EAAA,IALjBC,QAKiB,QALjBA,QAKiB;EAAA,IAJjBC,UAIiB,QAJjBA,UAIiB;EAAA,IAHjBC,WAGiB,QAHjBA,UAGiB;EAAA,IAFjBC,MAEiB,QAFjBA,MAEiB;EAAA,IADjBC,OACiB,QADjBA,OACiB;EAIjB,IAAMC,KAAK,GAAGC,KAAK,CAACC,OAAND,CACZ;IAAA,OAAO;MAAEE,OAAO,EAAE;IAAX,CAAP;EAAA,CADYF,EAGZ,CAACN,QAAD,EAAWC,UAAX,EAAuBC,WAAvB,EAAmCC,MAAnC,EAA2CC,OAA3C,CAHYE,CAAd;EAMA,IAAMG,OAAO,qBACRN,MAAM,CAACO,cADC,EAERC,sBAFQ,CAAb;EAKAN,KAAK,CAACG,OAANH,GAAgBN,KAAK,CAACa,MAANb,CAAac,MAAbd,CACd,UAACe,GAAD,EAAMC,KAAN,EAAgB;IACd,IAAMC,QAAQ,GAAGX,KAAK,CAACG,OAANH,CAAcU,KAAK,CAACE,GAApBZ,CAAjB;;IAEA,IAAIW,QAAJ,EAAc;MAEZF,GAAG,CAACC,KAAK,CAACE,GAAP,CAAHH,GAAiBE,QAAjBF;IAFF,OAGO;MAEL,IAAQI,IAAR,GAA0BjB,UAA1B,CAAQiB,IAAR;MAAA,IAAiBC,IAAjB,0CAA0BlB,UAA1B;;MAEA,IAAMmB,QAAQ,GACZC,SADID,QACJC,OADe,EAEZ;QACH,IAAMC,OAAO,GACX,OAAOD,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,CAACrB,QAAQ,EAAT,CAArC,GAAoDqB,MADtD;QAGApB,UAAU,CAACmB,QAAXnB,CACE,OAAOqB,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,IAAI,IAA1C;UACMC,MAAM,EAAER,KAAK,CAACE;QADpB,GAC4BK,OAD5B,IAEIA,OAHNrB;MANF;;MAaA,IAAMuB,OAAO,GAAGC,MAAM,CAACC,IAAPD,CAAYhB,OAAZgB,EAAqBZ,MAArBY,CACd,UAACX,GAAD,EAAMa,IAAN,EAAe;QAEbb,GAAG,CAACa,IAAD,CAAHb,GAAY;UAAA,OAAkBM,QAAQ,CAACX,OAAO,CAACkB,IAAD,CAAPlB,cAAO,YAAR,CAA1B;QAAA,CAAZK;;QACA,OAAOA,GAAP;MAJY,GAMd,EANcW,CAAhB;MASAX,GAAG,CAACC,KAAK,CAACE,GAAP,CAAHH,qBACKK,IADLL,EAEKU,OAFLV,EAGKV,OAAO,CAACwB,MAARxB,CAAeW,KAAK,CAACE,GAArBb,CAHLU;QAIEM,QAJe,EAIfA,QAJFN;QAKEZ,UAAU,EAAG2B,2BAAD;UAAA,OACV3B,WAAU,CAAE4B,WAAD;YAAA,yBACNA,CADM,oCAERf,KAAK,CAACE,GAFE,oBAESa,CAAC,CAACf,KAAK,CAACE,GAAP,CAFV,EAE0BY,OAF1B;UAAA,CAAD,CADA;QAAA,CALdf;QAUEiB,SAAS,EAAE,qBAAM;UACf,IAAMhC,KAAK,GAAGC,QAAQ,EAAtB;;UAEA,IAAID,KAAK,CAACa,MAANb,CAAaA,KAAK,CAACiC,KAAnBjC,EAA0BkB,GAA1BlB,KAAkCgB,KAAK,CAACE,GAA5C,EAAiD;YAC/C,OAAO,KAAP;UAJa;;UASf,OAAOhB,UAAU,GAAGA,UAAU,CAAC8B,SAAX9B,EAAH,GAA4B,IAA7C;QACD;MApBHa;IAsBD;;IAED,OAAOA,GAAP;EAzDY,GA2Dd,EA3Dcf,CAAhBM;EA8DA,OAAOA,KAAK,CAACG,OAAb;AACD","names":["useNavigationCache","state","getState","navigation","setOptions","router","emitter","cache","React","useMemo","current","actions","actionCreators","CommonActions","routes","reduce","acc","route","previous","key","emit","rest","dispatch","action","payload","source","helpers","Object","keys","name","create","options","o","isFocused","index"],"sources":["useNavigationCache.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  NavigationAction,\n  ParamListBase,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\nimport type { EventMapBase, NavigationHelpers, NavigationProp } from './types';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMapBase>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n> = {\n  [key: string]: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n};\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State>) {\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<NavigationCache<State, ScreenOptions>>(\n    (acc, route) => {\n      const previous = cache.current[route.key];\n\n      if (previous) {\n        // If a cached navigation object already exists, reuse it\n        acc[route.key] = previous;\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { emit, ...rest } = navigation;\n\n        const dispatch = (\n          action: NavigationAction | ((state: State) => NavigationAction)\n        ) => {\n          const payload =\n            typeof action === 'function' ? action(getState()) : action;\n\n          navigation.dispatch(\n            typeof payload === 'object' && payload != null\n              ? { source: route.key, ...payload }\n              : payload\n          );\n        };\n\n        const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n          (acc, name) => {\n            // @ts-expect-error: name is a valid key, but TypeScript is dumb\n            acc[name] = (...args: any) => dispatch(actions[name](...args));\n            return acc;\n          },\n          {}\n        );\n\n        acc[route.key] = {\n          ...rest,\n          ...helpers,\n          ...emitter.create(route.key),\n          dispatch,\n          setOptions: (options: object) =>\n            setOptions((o) => ({\n              ...o,\n              [route.key]: { ...o[route.key], ...options },\n            })),\n          isFocused: () => {\n            const state = getState();\n\n            if (state.routes[state.index].key !== route.key) {\n              return false;\n            }\n\n            // If the current screen is focused, we also need to check if parent navigator is focused\n            // This makes sure that we return the focus state in the whole tree, not just this navigator\n            return navigation ? navigation.isFocused() : true;\n          },\n        };\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  return cache.current;\n}\n"]},"metadata":{},"sourceType":"script"}