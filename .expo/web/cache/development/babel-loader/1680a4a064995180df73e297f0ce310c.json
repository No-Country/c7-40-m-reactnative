{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DrawerActions = void 0;\nexports.default = DrawerRouter;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _nonSecure = require(\"nanoid/non-secure\");\n\nvar _TabRouter = _interopRequireWildcard(require(\"./TabRouter\"));\n\nvar _excluded = [\"openByDefault\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar DrawerActions = Object.assign({}, _TabRouter.TabActions, {\n  openDrawer: function openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer: function closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer: function toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n});\nexports.DrawerActions = DrawerActions;\n\nvar isDrawerOpen = function isDrawerOpen(state) {\n  var _state$history;\n\n  return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(function (it) {\n    return it.type === 'drawer';\n  }));\n};\n\nvar openDrawer = function openDrawer(state) {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return Object.assign({}, state, {\n    history: [].concat((0, _toConsumableArray2.default)(state.history), [{\n      type: 'drawer'\n    }])\n  });\n};\n\nvar closeDrawer = function closeDrawer(state) {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return Object.assign({}, state, {\n    history: state.history.filter(function (it) {\n      return it.type !== 'drawer';\n    })\n  });\n};\n\nfunction DrawerRouter(_ref) {\n  var openByDefault = _ref.openByDefault,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var router = (0, _TabRouter.default)(rest);\n  return Object.assign({}, router, {\n    type: 'drawer',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList,\n          routeGetIdList = _ref2.routeGetIdList;\n      var state = router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return Object.assign({}, state, {\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\".concat((0, _nonSecure.nanoid)())\n      });\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList,\n          routeGetIdList = _ref3.routeGetIdList;\n\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      var state = router.getRehydratedState(partialState, {\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n\n      if (partialState.history ? isDrawerOpen(partialState) : openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return Object.assign({}, state, {\n        type: 'drawer',\n        key: \"drawer-\".concat((0, _nonSecure.nanoid)())\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var result = router.getStateForRouteFocus(state, key);\n\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"mappings":"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","names":["DrawerActions","TabActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","state","Boolean","history","_state$history","some","it","filter","DrawerRouter","openByDefault","rest","router","TabRouter","getInitialState","routeNames","routeParamList","routeGetIdList","stale","key","nanoid","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","options","actionCreators"],"sources":["DrawerRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport type {\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  ParamListBase,\n} from './types';\nimport TabRouter, {\n  TabActions,\n  TabActionType,\n  TabRouterOptions,\n  TabNavigationState,\n  TabActionHelpers,\n} from './TabRouter';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  openByDefault?: boolean;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: ({ type: 'route'; key: string } | { type: 'drawer' })[];\n};\n\nexport type DrawerActionHelpers<\n  ParamList extends ParamListBase\n> = TabActionHelpers<ParamList> & {\n  /**\n   * Open the drawer sidebar.\n   */\n  openDrawer(): void;\n\n  /**\n   * Close the drawer sidebar.\n   */\n  closeDrawer(): void;\n\n  /**\n   * Open the drawer sidebar if closed, or close if opened.\n   */\n  toggleDrawer(): void;\n};\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nconst isDrawerOpen = (\n  state:\n    | DrawerNavigationState<ParamListBase>\n    | PartialState<DrawerNavigationState<ParamListBase>>\n) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\nconst openDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: [...state.history, { type: 'drawer' }],\n  };\n};\n\nconst closeDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: state.history.filter((it) => it.type !== 'drawer'),\n  };\n};\n\nexport default function DrawerRouter({\n  openByDefault,\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = (TabRouter(rest) as unknown) as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      let state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (partialState.history ? isDrawerOpen(partialState) : openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}