{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useLinkTo;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _core = require(\"@react-navigation/core\");\n\nvar _LinkingContext = _interopRequireDefault(require(\"./LinkingContext\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useLinkTo() {\n  var navigation = React.useContext(_core.NavigationContext);\n  var linking = React.useContext(_LinkingContext.default);\n  var linkTo = React.useCallback(function (path) {\n    if (!path.startsWith('/')) {\n      throw new Error(\"The path must start with '/' (\".concat(path, \").\"));\n    }\n\n    if (navigation === undefined) {\n      throw new Error(\"Couldn't find a navigation object. Is your component inside a screen in a navigator?\");\n    }\n\n    var options = linking.options;\n    var state = options !== null && options !== void 0 && options.getStateFromPath ? options.getStateFromPath(path, options.config) : (0, _core.getStateFromPath)(path, options === null || options === void 0 ? void 0 : options.config);\n\n    if (state) {\n      var root = navigation;\n      var current;\n\n      while (current = root.getParent()) {\n        root = current;\n      }\n\n      var action = (0, _core.getActionFromState)(state, options === null || options === void 0 ? void 0 : options.config);\n\n      if (action !== undefined) {\n        root.dispatch(action);\n      } else {\n        root.reset(state);\n      }\n    } else {\n      throw new Error('Failed to parse the path to a navigation state.');\n    }\n  }, [linking, navigation]);\n  return linkTo;\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAKA;;;;;;AAEe,SAASA,SAAT,GAAqB;EAClC,IAAMC,UAAU,GAAGC,KAAK,CAACC,UAAND,CAAiBE,uBAAjBF,CAAnB;EACA,IAAMG,OAAO,GAAGH,KAAK,CAACC,UAAND,CAAiBI,uBAAjBJ,CAAhB;EAEA,IAAMK,MAAM,GAAGL,KAAK,CAACM,WAANN,CACZO,cAAD,EAAkB;IAChB,IAAI,CAACA,IAAI,CAACC,UAALD,CAAgB,GAAhBA,CAAL,EAA2B;MACzB,MAAM,IAAIE,KAAJ,yCAA2CF,IAA3C,QAAN;IACD;;IAED,IAAIR,UAAU,KAAKW,SAAnB,EAA8B;MAC5B,MAAM,IAAID,KAAJ,CACJ,sFADI,CAAN;IAGD;;IAED,IAAQE,OAAR,GAAoBR,OAApB,CAAQQ,OAAR;IAEA,IAAMC,KAAK,GAAGD,OAAO,SAAPA,WAAO,WAAPA,WAAO,CAAEE,gBAATF,GACVA,OAAO,CAACE,gBAARF,CAAyBJ,IAAzBI,EAA+BA,OAAO,CAACG,MAAvCH,CADUA,GAEVE,4BAAiBN,IAAjBM,EAAuBF,OAAP,SAAOA,WAAP,WAAOA,GAAP,MAAOA,UAAO,CAAEG,MAAhCD,CAFJ;;IAIA,IAAID,KAAJ,EAAW;MACT,IAAIG,IAAI,GAAGhB,UAAX;MACA,IAAIiB,OAAJ;;MAGA,OAAQA,OAAO,GAAGD,IAAI,CAACE,SAALF,EAAlB,EAAqC;QACnCA,IAAI,GAAGC,OAAPD;MACD;;MAED,IAAMG,MAAM,GAAGC,8BAAmBP,KAAnBO,EAA0BR,OAAR,SAAQA,WAAR,WAAQA,GAAR,MAAQA,UAAO,CAAEG,MAAnCK,CAAf;;MAEA,IAAID,MAAM,KAAKR,SAAf,EAA0B;QACxBK,IAAI,CAACK,QAALL,CAAcG,MAAdH;MADF,OAEO;QACLA,IAAI,CAACM,KAALN,CAAWH,KAAXG;MACD;IAfH,OAgBO;MACL,MAAM,IAAIN,KAAJ,CAAU,iDAAV,CAAN;IACD;EApCU,GAsCb,CAACN,OAAD,EAAUJ,UAAV,CAtCaC,CAAf;EAyCA,OAAOK,MAAP;AACD","names":["useLinkTo","navigation","React","useContext","NavigationContext","linking","LinkingContext","linkTo","useCallback","path","startsWith","Error","undefined","options","state","getStateFromPath","config","root","current","getParent","action","getActionFromState","dispatch","reset"],"sources":["useLinkTo.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  getStateFromPath,\n  getActionFromState,\n  NavigationContext,\n} from '@react-navigation/core';\nimport LinkingContext from './LinkingContext';\n\nexport default function useLinkTo() {\n  const navigation = React.useContext(NavigationContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (path: string) => {\n      if (!path.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${path}).`);\n      }\n\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside a screen in a navigator?\"\n        );\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(path, options.config)\n        : getStateFromPath(path, options?.config);\n\n      if (state) {\n        let root = navigation;\n        let current;\n\n        // Traverse up to get the root navigation\n        while ((current = root.getParent())) {\n          root = current;\n        }\n\n        const action = getActionFromState(state, options?.config);\n\n        if (action !== undefined) {\n          root.dispatch(action);\n        } else {\n          root.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n"]},"metadata":{},"sourceType":"script"}