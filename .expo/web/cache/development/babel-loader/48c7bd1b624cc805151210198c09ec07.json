{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.CheckboxIOS = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _MaterialCommunityIcon = _interopRequireDefault(require(\"../MaterialCommunityIcon\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _excluded = [\"status\", \"disabled\", \"onPress\", \"theme\", \"testID\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar CheckboxIOS = function CheckboxIOS(_ref) {\n  var status = _ref.status,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var checked = status === 'checked';\n  var indeterminate = status === 'indeterminate';\n  var checkedColor = disabled ? theme.colors.disabled : rest.color || theme.colors.accent;\n  var rippleColor;\n\n  if (disabled) {\n    rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();\n  }\n\n  var icon = indeterminate ? 'minus' : 'check';\n  return React.createElement(_TouchableRipple.default, _extends({}, rest, {\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onPress,\n    disabled: disabled,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      disabled: disabled,\n      checked: checked\n    },\n    accessibilityLiveRegion: \"polite\",\n    style: styles.container,\n    testID: testID\n  }), React.createElement(_reactNative.View, {\n    style: {\n      opacity: indeterminate || checked ? 1 : 0\n    }\n  }, React.createElement(_MaterialCommunityIcon.default, {\n    allowFontScaling: false,\n    name: icon,\n    size: 24,\n    color: checkedColor,\n    direction: \"ltr\"\n  })));\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\n\nvar _default = (0, _theming.withTheme)(CheckboxIOS);\n\nexports.default = _default;\nvar CheckboxIOSWithTheme = (0, _theming.withTheme)(CheckboxIOS);\nexports.CheckboxIOS = CheckboxIOSWithTheme;","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA,IAAMA,WAAW,GAAG,SAAdA,WAAc,OAOP;EAAA,IANXC,MAMW,QANXA,MAMW;EAAA,IALXC,QAKW,QALXA,QAKW;EAAA,IAJXC,OAIW,QAJXA,OAIW;EAAA,IAHXC,KAGW,QAHXA,KAGW;EAAA,IAFXC,MAEW,QAFXA,MAEW;EAAA,IADRC,IACQ;EACX,IAAMC,OAAO,GAAGN,MAAM,KAAK,SAA3B;EACA,IAAMO,aAAa,GAAGP,MAAM,KAAK,eAAjC;EAEA,IAAMQ,YAAY,GAAGP,QAAQ,GACzBE,KAAK,CAACM,MAANN,CAAaF,QADY,GAEzBI,IAAI,CAACK,KAALL,IAAcF,KAAK,CAACM,MAANN,CAAaQ,MAF/B;EAIA,IAAIC,WAAJ;;EAEA,IAAIX,QAAJ,EAAc;IACZW,WAAW,GAAGF,oBAAMP,KAAK,CAACM,MAANN,CAAaU,IAAnBH,EAAyBI,KAAzBJ,CAA+B,IAA/BA,EAAqCK,GAArCL,GAA2CM,MAA3CN,EAAdE;EADF,OAEO;IACLA,WAAW,GAAGF,oBAAMF,YAANE,EAAoBO,IAApBP,CAAyB,IAAzBA,EAA+BK,GAA/BL,GAAqCM,MAArCN,EAAdE;EACD;;EAED,IAAMM,IAAI,GAAGX,aAAa,GAAG,OAAH,GAAa,OAAvC;EAEA,OACEY,oBAACC,wBAAD,eACMf,IADN;IAEEgB,UAAU,MAFZ;IAGET,WAAW,EAAEA,WAHf;IAIEV,OAAO,EAAEA,OAJX;IAKED,QAAQ,EAAEA,QALZ;IAOEqB,mBAAmB,EAAErB,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAP3D;IAQEsB,0BAA0B,EAAC,QAR7B;IASEC,iBAAiB,EAAC,UATpB;IAUEC,kBAAkB,EAAE;MAAExB,QAAF,EAAEA,QAAF;MAAYK;IAAZ,CAVtB;IAWEoB,uBAAuB,EAAC,QAX1B;IAYEC,KAAK,EAAEC,MAAM,CAACC,SAZhB;IAaEzB,MAAM,EAAEA;EAbV,IAeEe,oBAACW,iBAAD;IAAMH,KAAK,EAAE;MAAEI,OAAO,EAAExB,aAAa,IAAID,OAAjBC,GAA2B,CAA3BA,GAA+B;IAA1C;EAAb,GACEY,oBAACa,8BAAD;IACEC,gBAAgB,EAAE,KADpB;IAEEC,IAAI,EAAEhB,IAFR;IAGEiB,IAAI,EAAE,EAHR;IAIEzB,KAAK,EAAEF,YAJT;IAKE4B,SAAS,EAAC;EALZ,EADF,CAfF,CADF;AAzBF;;AAsDArC,WAAW,CAACsC,WAAZtC,GAA0B,cAA1BA;;AAEA,IAAM6B,MAAM,GAAGU,wBAAWC,MAAXD,CAAkB;EAC/BT,SAAS,EAAE;IACTW,YAAY,EAAE,EADL;IAETC,OAAO,EAAE;EAFA;AADoB,CAAlBH,CAAf;;eAOeI,wBAAU3C,WAAV2C,C;;;AAGf,IAAMC,oBAAoB,GAAGD,wBAAU3C,WAAV2C,CAA7B","names":["CheckboxIOS","status","disabled","onPress","theme","testID","rest","checked","indeterminate","checkedColor","colors","color","accent","rippleColor","text","alpha","rgb","string","fade","icon","React","TouchableRipple","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","View","opacity","MaterialCommunityIcon","allowFontScaling","name","size","direction","displayName","StyleSheet","create","borderRadius","padding","withTheme","CheckboxIOSWithTheme"],"sources":["CheckboxIOS.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxIOS = ({\n  status,\n  disabled,\n  onPress,\n  theme,\n  testID,\n  ...rest\n}: Props) => {\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  const icon = indeterminate ? 'minus' : 'check';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkedColor}\n          direction=\"ltr\"\n        />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nconst CheckboxIOSWithTheme = withTheme(CheckboxIOS);\n// @component-docs ignore-next-line\nexport { CheckboxIOSWithTheme as CheckboxIOS };\n"]},"metadata":{},"sourceType":"script"}