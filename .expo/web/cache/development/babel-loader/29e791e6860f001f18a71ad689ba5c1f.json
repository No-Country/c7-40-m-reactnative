{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TabActions = void 0;\nexports.default = TabRouter;\n\nvar _nonSecure = require(\"nanoid/non-secure\");\n\nvar _BaseRouter = _interopRequireDefault(require(\"./BaseRouter\"));\n\nvar TYPE_ROUTE = 'route';\nvar TabActions = {\n  jumpTo: function jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  }\n};\nexports.TabActions = TabActions;\n\nvar getRouteHistory = function getRouteHistory(routes, index, backBehavior, initialRouteName) {\n  var history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  var initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (var i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n\n      break;\n\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key\n        });\n      }\n\n      break;\n\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(function (route) {\n        return route.name === initialRouteName;\n      });\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n\n      break;\n\n    case 'history':\n      break;\n  }\n\n  return history;\n};\n\nvar changeIndex = function changeIndex(state, index, backBehavior, initialRouteName) {\n  var history;\n\n  if (backBehavior === 'history') {\n    var currentKey = state.routes[index].key;\n    history = state.history.filter(function (it) {\n      return it.type === 'route' ? it.key !== currentKey : false;\n    }).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n\n  return Object.assign({}, state, {\n    index: index,\n    history: history\n  });\n};\n\nfunction TabRouter(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      _ref$backBehavior = _ref.backBehavior,\n      backBehavior = _ref$backBehavior === void 0 ? 'history' : _ref$backBehavior;\n  var router = Object.assign({}, _BaseRouter.default, {\n    type: 'tab',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList;\n      var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      var routes = routeNames.map(function (name) {\n        return {\n          name: name,\n          key: \"\".concat(name, \"-\").concat((0, _nonSecure.nanoid)()),\n          params: routeParamList[name]\n        };\n      });\n      var history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: \"tab-\".concat((0, _nonSecure.nanoid)()),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList;\n\n      var _state$routes, _state$index, _state$history$filter, _state$history;\n\n      var state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      var routes = routeNames.map(function (name) {\n        var route = state.routes.find(function (r) {\n          return r.name === name;\n        });\n        return Object.assign({}, route, {\n          name: name,\n          key: route && route.name === name && route.key ? route.key : \"\".concat(name, \"-\").concat((0, _nonSecure.nanoid)()),\n          params: routeParamList[name] !== undefined ? Object.assign({}, routeParamList[name], route ? route.params : undefined) : route ? route.params : undefined\n        });\n      });\n      var index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_state$index = state === null || state === void 0 ? void 0 : state.index) !== null && _state$index !== void 0 ? _state$index : 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);\n      var history = (_state$history$filter = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(function (it) {\n        return routes.find(function (r) {\n          return r.key === it.key;\n        });\n      })) !== null && _state$history$filter !== void 0 ? _state$history$filter : [];\n      return changeIndex({\n        stale: false,\n        type: 'tab',\n        key: \"tab-\".concat((0, _nonSecure.nanoid)()),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes\n      }, index, backBehavior, initialRouteName);\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4) {\n      var routeNames = _ref4.routeNames,\n          routeParamList = _ref4.routeParamList;\n      var routes = routeNames.map(function (name) {\n        return state.routes.find(function (r) {\n          return r.name === name;\n        }) || {\n          name: name,\n          key: \"\".concat(name, \"-\").concat((0, _nonSecure.nanoid)()),\n          params: routeParamList[name]\n        };\n      });\n      var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      var history = state.history.filter(function (it) {\n        return it.type !== 'route' || routes.find(function (r) {\n          return r.key === it.key;\n        });\n      });\n\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n\n      return Object.assign({}, state, {\n        history: history,\n        routeNames: routeNames,\n        routes: routes,\n        index: index\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n    getStateForAction: function getStateForAction(state, action, _ref5) {\n      var routeParamList = _ref5.routeParamList;\n\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            var index = -1;\n\n            if (action.type === 'NAVIGATE' && action.payload.key) {\n              index = state.routes.findIndex(function (route) {\n                return route.key === action.payload.key;\n              });\n            } else {\n              index = state.routes.findIndex(function (route) {\n                return route.name === action.payload.name;\n              });\n            }\n\n            if (index === -1) {\n              return null;\n            }\n\n            return changeIndex(Object.assign({}, state, {\n              routes: action.payload.params !== undefined ? state.routes.map(function (route, i) {\n                if (i !== index) {\n                  return route;\n                }\n\n                var params;\n\n                if (action.type === 'NAVIGATE' && action.payload.merge === false) {\n                  params = routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], action.payload.params) : action.payload.params;\n                } else {\n                  params = action.payload.params ? Object.assign({}, route.params, action.payload.params) : route.params;\n                }\n\n                return params !== route.params ? Object.assign({}, route, {\n                  params: params\n                }) : route;\n              }) : state.routes\n            }), index, backBehavior, initialRouteName);\n          }\n\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n\n            var previousKey = state.history[state.history.length - 2].key;\n\n            var _index = state.routes.findIndex(function (route) {\n              return route.key === previousKey;\n            });\n\n            if (_index === -1) {\n              return null;\n            }\n\n            return Object.assign({}, state, {\n              history: state.history.slice(0, -1),\n              index: _index\n            });\n          }\n\n        default:\n          return _BaseRouter.default.getStateForAction(state, action);\n      }\n    },\n    shouldActionChangeFocus: function shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n    actionCreators: TabActions\n  });\n  return router;\n}","map":{"version":3,"mappings":"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","names":["TYPE_ROUTE","TabActions","jumpTo","name","params","type","payload","getRouteHistory","routes","index","backBehavior","initialRouteName","history","key","initialRouteIndex","i","unshift","findIndex","route","changeIndex","state","currentKey","filter","it","concat","TabRouter","router","BaseRouter","getInitialState","routeNames","routeParamList","undefined","includes","indexOf","map","nanoid","stale","getRehydratedState","partialState","find","r","Math","min","max","_state$routes","length","_state$history","getStateForRouteNamesChange","getStateForRouteFocus","getStateForAction","action","merge","previousKey","slice","shouldActionChangeFocus","actionCreators"],"sources":["TabRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nimport type {\n  NavigationState,\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  DefaultRouterOptions,\n  Route,\n  ParamListBase,\n} from './types';\n\nexport type TabActionType = {\n  type: 'JUMP_TO';\n  payload: { name: string; params?: object };\n  source?: string;\n  target?: string;\n};\n\nexport type BackBehavior =\n  | 'initialRoute'\n  | 'firstRoute'\n  | 'history'\n  | 'order'\n  | 'none';\n\nexport type TabRouterOptions = DefaultRouterOptions & {\n  backBehavior?: BackBehavior;\n};\n\nexport type TabNavigationState<ParamList extends ParamListBase> = Omit<\n  NavigationState<ParamList>,\n  'history'\n> & {\n  /**\n   * Type of the router, in this case, it's tab.\n   */\n  type: 'tab';\n  /**\n   * List of previously visited route keys.\n   */\n  history: { type: 'route'; key: string }[];\n};\n\nexport type TabActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Jump to an existing tab.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  jumpTo<RouteName extends Extract<keyof ParamList, string>>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n};\n\nconst TYPE_ROUTE = 'route' as const;\n\nexport const TabActions = {\n  jumpTo(name: string, params?: object): TabActionType {\n    return { type: 'JUMP_TO', payload: { name, params } };\n  },\n};\n\nconst getRouteHistory = (\n  routes: Route<string>[],\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key,\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(\n        (route) => route.name === initialRouteName\n      );\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key,\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (\n  state: TabNavigationState<ParamListBase>,\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n\n    history = state.history\n      .filter((it) => (it.type === 'route' ? it.key !== currentKey : false))\n      .concat({ type: TYPE_ROUTE, key: currentKey });\n  } else {\n    history = getRouteHistory(\n      state.routes,\n      index,\n      backBehavior,\n      initialRouteName\n    );\n  }\n\n  return {\n    ...state,\n    index,\n    history,\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'history',\n}: TabRouterOptions) {\n  const router: Router<\n    TabNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...BaseRouter,\n\n    type: 'tab',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\n          ? routeNames.indexOf(initialRouteName)\n          : 0;\n\n      const routes = routeNames.map((name) => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name],\n      }));\n\n      const history = getRouteHistory(\n        routes,\n        index,\n        backBehavior,\n        initialRouteName\n      );\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map((name) => {\n        const route = (state as PartialState<\n          TabNavigationState<ParamListBase>\n        >).routes.find((r) => r.name === name);\n\n        return {\n          ...route,\n          name,\n          key:\n            route && route.name === name && route.key\n              ? route.key\n              : `${name}-${nanoid()}`,\n          params:\n            routeParamList[name] !== undefined\n              ? {\n                  ...routeParamList[name],\n                  ...(route ? route.params : undefined),\n                }\n              : route\n              ? route.params\n              : undefined,\n        } as Route<string>;\n      });\n\n      const index = Math.min(\n        Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0),\n        routes.length - 1\n      );\n\n      const history =\n        state.history?.filter((it) => routes.find((r) => r.key === it.key)) ??\n        [];\n\n      return changeIndex(\n        {\n          stale: false,\n          type: 'tab',\n          key: `tab-${nanoid()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n        },\n        index,\n        backBehavior,\n        initialRouteName\n      );\n    },\n\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\n      const routes = routeNames.map(\n        (name) =>\n          state.routes.find((r) => r.name === name) || {\n            name,\n            key: `${name}-${nanoid()}`,\n            params: routeParamList[name],\n          }\n      );\n\n      const index = Math.max(\n        0,\n        routeNames.indexOf(state.routes[state.index].name)\n      );\n\n      let history = state.history.filter(\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n        (it) => it.type !== 'route' || routes.find((r) => r.key === it.key)\n      );\n\n      if (!history.length) {\n        history = getRouteHistory(\n          routes,\n          index,\n          backBehavior,\n          initialRouteName\n        );\n      }\n\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action, { routeParamList }) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          let index = -1;\n\n          if (action.type === 'NAVIGATE' && action.payload.key) {\n            index = state.routes.findIndex(\n              (route) => route.key === action.payload.key\n            );\n          } else {\n            index = state.routes.findIndex(\n              (route) => route.name === action.payload.name\n            );\n          }\n\n          if (index === -1) {\n            return null;\n          }\n\n          return changeIndex(\n            {\n              ...state,\n              routes:\n                action.payload.params !== undefined\n                  ? state.routes.map((route, i) => {\n                      if (i !== index) {\n                        return route;\n                      }\n\n                      let params;\n\n                      if (\n                        action.type === 'NAVIGATE' &&\n                        action.payload.merge === false\n                      ) {\n                        params =\n                          routeParamList[route.name] !== undefined\n                            ? {\n                                ...routeParamList[route.name],\n                                ...action.payload.params,\n                              }\n                            : action.payload.params;\n                      } else {\n                        params = action.payload.params\n                          ? {\n                              ...route.params,\n                              ...action.payload.params,\n                            }\n                          : route.params;\n                      }\n\n                      return params !== route.params\n                        ? { ...route, params }\n                        : route;\n                    })\n                  : state.routes,\n            },\n            index,\n            backBehavior,\n            initialRouteName\n          );\n        }\n\n        case 'GO_BACK': {\n          if (state.history.length === 1) {\n            return null;\n          }\n\n          const previousKey = state.history[state.history.length - 2].key;\n          const index = state.routes.findIndex(\n            (route) => route.key === previousKey\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          return {\n            ...state,\n            history: state.history.slice(0, -1),\n            index,\n          };\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"script"}