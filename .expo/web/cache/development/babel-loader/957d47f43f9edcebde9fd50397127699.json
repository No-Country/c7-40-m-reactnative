{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SUPPRESS_STATE_ACCESS_WARNING = void 0;\nexports.default = useRouteCache;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar SUPPRESS_STATE_ACCESS_WARNING = {\n  value: false\n};\nexports.SUPPRESS_STATE_ACCESS_WARNING = SUPPRESS_STATE_ACCESS_WARNING;\n\nfunction useRouteCache(routes) {\n  var cache = React.useMemo(function () {\n    return {\n      current: new Map()\n    };\n  }, []);\n\n  if (process.env.NODE_ENV === 'production') {\n    return routes;\n  }\n\n  cache.current = routes.reduce(function (acc, route) {\n    var previous = cache.current.get(route);\n\n    if (previous) {\n      acc.set(route, previous);\n    } else {\n      var proxy = Object.assign({}, route);\n      Object.defineProperty(proxy, 'state', {\n        get: function get() {\n          if (!SUPPRESS_STATE_ACCESS_WARNING.value) {\n            console.warn(\"Accessing the 'state' property of the 'route' object is not supported. If you want to get the focused route name, use the 'getFocusedRouteNameFromRoute' helper instead: https://reactnavigation.org/docs/5.x/screen-options-resolution/#setting-parent-screen-options-based-on-child-navigators-state\");\n          }\n\n          return route.state;\n        }\n      });\n      acc.set(route, proxy);\n    }\n\n    return acc;\n  }, new Map());\n  return Array.from(cache.current.values());\n}","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;AAeO,IAAMA,6BAA6B,GAAG;EAAEC,KAAK,EAAE;AAAT,CAAtC;;;AAMQ,SAASC,aAAT,CACbC,MADa,EAEb;EAEA,IAAMC,KAAK,GAAGC,KAAK,CAACC,OAAND,CAAc;IAAA,OAAO;MAAEE,OAAO,EAAE,IAAIC,GAAJ;IAAX,CAAP;EAAA,CAAdH,EAA4D,EAA5DA,CAAd;;EAEA,IAAII,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;IAEzC,OAAON,MAAP;EACD;;EAEDC,KAAK,CAACG,OAANH,GAAgBD,MAAM,CAACS,MAAPT,CAAc,UAACU,GAAD,EAAMC,KAAN,EAAgB;IAC5C,IAAMC,QAAQ,GAAGX,KAAK,CAACG,OAANH,CAAcY,GAAdZ,CAAkBU,KAAlBV,CAAjB;;IAEA,IAAIW,QAAJ,EAAc;MAEZF,GAAG,CAACI,GAAJJ,CAAQC,KAARD,EAAeE,QAAfF;IAFF,OAGO;MACL,IAAMK,KAAK,qBAAQJ,KAAR,CAAX;MAEAK,MAAM,CAACC,cAAPD,CAAsBD,KAAtBC,EAA6B,OAA7BA,EAAsC;QACpCH,GADoC,iBAC9B;UACJ,IAAI,CAAChB,6BAA6B,CAACC,KAAnC,EAA0C;YACxCoB,OAAO,CAACC,IAARD,CACE,wSADFA;UAGD;;UAED,OAAOP,KAAK,CAACS,KAAb;QACD;MATmC,CAAtCJ;MAYAN,GAAG,CAACI,GAAJJ,CAAQC,KAARD,EAAeK,KAAfL;IACD;;IAED,OAAOA,GAAP;EAxBc,GAyBb,IAAIL,GAAJ,EAzBaL,CAAhBC;EA2BA,OAAOoB,KAAK,CAACC,IAAND,CAAWpB,KAAK,CAACG,OAANH,CAAcsB,MAAdtB,EAAXoB,CAAP;AACD","names":["SUPPRESS_STATE_ACCESS_WARNING","value","useRouteCache","routes","cache","React","useMemo","current","Map","process","env","NODE_ENV","reduce","acc","route","previous","get","set","proxy","Object","defineProperty","console","warn","state","Array","from","values"],"sources":["useRouteCache.tsx"],"sourcesContent":["import * as React from 'react';\nimport type {\n  ParamListBase,\n  NavigationState,\n  Route,\n} from '@react-navigation/routers';\nimport type { RouteProp } from './types';\n\ntype RouteCache = Map<Route<string>, RouteProp<ParamListBase, string>>;\n\n/**\n * Utilites such as `getFocusedRouteNameFromRoute` need to access state.\n * So we need a way to suppress the warning for those use cases.\n * This is fine since they are internal utilities and this is not public API.\n */\nexport const SUPPRESS_STATE_ACCESS_WARNING = { value: false };\n\n/**\n * Hook to cache route props for each screen in the navigator.\n * This lets add warnings and modifications to the route object but keep references between renders.\n */\nexport default function useRouteCache<State extends NavigationState>(\n  routes: State['routes']\n) {\n  // Cache object which holds route objects for each screen\n  const cache = React.useMemo(() => ({ current: new Map() as RouteCache }), []);\n\n  if (process.env.NODE_ENV === 'production') {\n    // We don't want the overhead of creating extra maps every render in prod\n    return routes;\n  }\n\n  cache.current = routes.reduce((acc, route) => {\n    const previous = cache.current.get(route);\n\n    if (previous) {\n      // If a cached route object already exists, reuse it\n      acc.set(route, previous);\n    } else {\n      const proxy = { ...route };\n\n      Object.defineProperty(proxy, 'state', {\n        get() {\n          if (!SUPPRESS_STATE_ACCESS_WARNING.value) {\n            console.warn(\n              \"Accessing the 'state' property of the 'route' object is not supported. If you want to get the focused route name, use the 'getFocusedRouteNameFromRoute' helper instead: https://reactnavigation.org/docs/5.x/screen-options-resolution/#setting-parent-screen-options-based-on-child-navigators-state\"\n            );\n          }\n\n          return route.state;\n        },\n      });\n\n      acc.set(route, proxy);\n    }\n\n    return acc;\n  }, new Map() as RouteCache);\n\n  return Array.from(cache.current.values());\n}\n"]},"metadata":{},"sourceType":"script"}