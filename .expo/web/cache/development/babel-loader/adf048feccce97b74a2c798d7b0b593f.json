{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _colors = require(\"../../styles/colors\");\n\nvar _getContrastingColor = _interopRequireDefault(require(\"../../utils/getContrastingColor\"));\n\nvar _excluded = [\"label\", \"size\", \"style\", \"theme\", \"labelStyle\", \"color\"],\n    _excluded2 = [\"backgroundColor\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar defaultSize = 64;\n\nvar AvatarText = function AvatarText(_ref) {\n  var label = _ref.label,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? defaultSize : _ref$size,\n      style = _ref.style,\n      theme = _ref.theme,\n      labelStyle = _ref.labelStyle,\n      customColor = _ref.color,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? theme.colors.primary : _ref2$backgroundColor,\n      restStyle = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);\n\n  var textColor = customColor !== null && customColor !== void 0 ? customColor : (0, _getContrastingColor.default)(backgroundColor, _colors.white, 'rgba(0, 0, 0, .54)');\n\n  var _useWindowDimensions = (0, _reactNative.useWindowDimensions)(),\n      fontScale = _useWindowDimensions.fontScale;\n\n  return React.createElement(_reactNative.View, _extends({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: backgroundColor\n    }, styles.container, restStyle]\n  }, rest), React.createElement(_Text.default, {\n    style: [styles.text, {\n      color: textColor,\n      fontSize: size / 2,\n      lineHeight: size / fontScale\n    }, labelStyle],\n    numberOfLines: 1\n  }, label));\n};\n\nAvatarText.displayName = 'Avatar.Text';\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(AvatarText);\n\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AACA;;AAQA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAG,EAApB;;AAgDA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAQN;EAAA,IAPXC,KAOW,QAPXA,KAOW;EAAA,qBANXC,IAMW;EAAA,IANXA,IAMW,0BANJH,WAMI;EAAA,IALXI,KAKW,QALXA,KAKW;EAAA,IAJXC,KAIW,QAJXA,KAIW;EAAA,IAHXC,UAGW,QAHXA,UAGW;EAAA,IAFJC,WAEI,QAFXC,KAEW;EAAA,IADRC,IACQ;;EACX,YACEC,wBAAWC,OAAXD,CAAmBN,KAAnBM,KAA6B,EAD/B;EAAA,kCAAQE,eAAR;EAAA,IAAQA,eAAR,sCAA0BP,KAAK,CAACQ,MAANR,CAAaS,OAAvC;EAAA,IAAmDC,SAAnD;;EAEA,IAAMC,SAAS,GACbT,WADa,SACbA,eADa,WACbA,iBACAU,kCAAoBL,eAApBK,EAAqCC,aAArCD,EAA4C,oBAA5CA,CAFF;;EAGA,2BAAsBE,uCAAtB;EAAA,IAAQC,SAAR,wBAAQA,SAAR;;EAEA,OACEC,oBAACC,iBAAD;IACElB,KAAK,EAAE,CACL;MACEmB,KAAK,EAAEpB,IADT;MAEEqB,MAAM,EAAErB,IAFV;MAGEsB,YAAY,EAAEtB,IAAI,GAAG,CAHvB;MAIES;IAJF,CADK,EAOLc,MAAM,CAACC,SAPF,EAQLZ,SARK;EADT,GAWMN,IAXN,GAaEY,oBAACO,aAAD;IACExB,KAAK,EAAE,CACLsB,MAAM,CAACG,IADF,EAEL;MACErB,KAAK,EAAEQ,SADT;MAEEc,QAAQ,EAAE3B,IAAI,GAAG,CAFnB;MAGE4B,UAAU,EAAE5B,IAAI,GAAGiB;IAHrB,CAFK,EAOLd,UAPK,CADT;IAUE0B,aAAa,EAAE;EAVjB,GAYG9B,KAZH,CAbF,CADF;AAhBF;;AAgDAD,UAAU,CAACgC,WAAXhC,GAAyB,aAAzBA;;AAEA,IAAMyB,MAAM,GAAGhB,wBAAWwB,MAAXxB,CAAkB;EAC/BiB,SAAS,EAAE;IACTQ,cAAc,EAAE,QADP;IAETC,UAAU,EAAE;EAFH,CADoB;EAK/BP,IAAI,EAAE;IACJQ,SAAS,EAAE,QADP;IAEJC,iBAAiB,EAAE;EAFf;AALyB,CAAlB5B,CAAf;;eAWe6B,wBAAUtC,UAAVsC,C","names":["defaultSize","AvatarText","label","size","style","theme","labelStyle","customColor","color","rest","StyleSheet","flatten","backgroundColor","colors","primary","restStyle","textColor","getContrastingColor","white","useWindowDimensions","fontScale","React","View","width","height","borderRadius","styles","container","Text","text","fontSize","lineHeight","numberOfLines","displayName","create","justifyContent","alignItems","textAlign","textAlignVertical","withTheme"],"sources":["AvatarText.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  useWindowDimensions,\n} from 'react-native';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\nimport getContrastingColor from '../../utils/getContrastingColor';\n\nconst defaultSize = 64;\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Initials to show as the text in the `Avatar`.\n   */\n  label: string;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Style for text container\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the title.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-text.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nconst AvatarText = ({\n  label,\n  size = defaultSize,\n  style,\n  theme,\n  labelStyle,\n  color: customColor,\n  ...rest\n}: Props) => {\n  const { backgroundColor = theme.colors.primary, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor =\n    customColor ??\n    getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  const { fontScale } = useWindowDimensions();\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      <Text\n        style={[\n          styles.text,\n          {\n            color: textColor,\n            fontSize: size / 2,\n            lineHeight: size / fontScale,\n          },\n          labelStyle,\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </Text>\n    </View>\n  );\n};\n\nAvatarText.displayName = 'Avatar.Text';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n  },\n});\n\nexport default withTheme(AvatarText);\n"]},"metadata":{},"sourceType":"script"}