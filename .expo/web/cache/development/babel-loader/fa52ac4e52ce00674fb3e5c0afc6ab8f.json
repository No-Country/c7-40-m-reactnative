{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _TextInputAdornment = _interopRequireWildcard(require(\"./Adornment/TextInputAdornment\"));\n\nvar _InputLabel = _interopRequireDefault(require(\"./Label/InputLabel\"));\n\nvar _LabelBackground = _interopRequireDefault(require(\"./Label/LabelBackground\"));\n\nvar _constants = require(\"./constants\");\n\nvar _helpers = require(\"./helpers\");\n\nvar _enums = require(\"./Adornment/enums\");\n\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"outlineColor\", \"activeOutlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"],\n    _excluded2 = [\"fontSize\", \"fontWeight\", \"fontVariant\", \"lineHeight\", \"height\", \"backgroundColor\", \"textAlign\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nvar LABEL_PADDING_TOP = 8;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT = 48;\nvar INPUT_PADDING_HORIZONTAL = 14;\n\nvar TextInputOutlined = function TextInputOutlined(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n\n  var _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable,\n      label = _ref.label,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? false : _ref$error,\n      selectionColor = _ref.selectionColor,\n      _underlineColor = _ref.underlineColor,\n      customOutlineColor = _ref.outlineColor,\n      activeOutlineColor = _ref.activeOutlineColor,\n      dense = _ref.dense,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$render = _ref.render,\n      render = _ref$render === void 0 ? function (props) {\n    return React.createElement(_reactNative.TextInput, props);\n  } : _ref$render,\n      _ref$multiline = _ref.multiline,\n      multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n      parentState = _ref.parentState,\n      innerRef = _ref.innerRef,\n      onFocus = _ref.onFocus,\n      forceFocus = _ref.forceFocus,\n      onBlur = _ref.onBlur,\n      onChangeText = _ref.onChangeText,\n      onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n      onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n      onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n      left = _ref.left,\n      right = _ref.right,\n      placeholderTextColor = _ref.placeholderTextColor,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var adornmentConfig = (0, _TextInputAdornment.getAdornmentConfig)({\n    left: left,\n    right: right\n  });\n  var colors = theme.colors,\n      fonts = theme.fonts;\n  var font = fonts.regular;\n  var hasActiveOutline = parentState.focused || error;\n\n  var _ref4 = _reactNative.StyleSheet.flatten(style) || {},\n      fontSizeStyle = _ref4.fontSize,\n      fontWeight = _ref4.fontWeight,\n      fontVariant = _ref4.fontVariant,\n      lineHeight = _ref4.lineHeight,\n      height = _ref4.height,\n      _ref4$backgroundColor = _ref4.backgroundColor,\n      backgroundColor = _ref4$backgroundColor === void 0 ? colors.background : _ref4$backgroundColor,\n      textAlign = _ref4.textAlign,\n      viewStyle = (0, _objectWithoutProperties2.default)(_ref4, _excluded2);\n\n  var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;\n  var inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n  if (disabled) {\n    var isTransparent = (0, _color.default)(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = (0, _color.default)(colors.text).alpha(0.54).rgb().string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n\n  var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (_reactNative.I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - _constants.MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n  var labelTranslationXOffset = 0;\n  var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n    var side = _ref2.side,\n        type = _ref2.type;\n    return side === _enums.AdornmentSide.Left && type === _enums.AdornmentType.Icon;\n  });\n\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset = (_reactNative.I18nManager.isRTL ? -1 : 1) * (_constants.ADORNMENT_SIZE + _constants.ADORNMENT_OFFSET - 8);\n  }\n\n  var minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n  var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);\n  var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, LABEL_PADDING_TOP);\n\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    label: label,\n    scale: fontScale,\n    isAndroid: _reactNative.Platform.OS === 'android',\n    styles: _reactNative.StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n  };\n  var pad = (0, _helpers.calculatePadding)(paddingSettings);\n  var paddingOut = (0, _helpers.adjustPaddingOut)(Object.assign({}, paddingSettings, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? (0, _helpers.interpolatePlaceholder)(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    backgroundColor: backgroundColor,\n    errorColor: errorColor,\n    labelTranslationXOffset: labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  var minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  var leftLayout = parentState.leftLayout,\n      rightLayout = parentState.rightLayout;\n  var leftAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var iconTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n    height: minHeight,\n    affixHeight: _constants.ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixWidth = right ? rightLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = (0, _TextInputAdornment.getAdornmentStyleAdjustmentForNativeInput)({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    mode: 'outlined'\n  });\n  var affixTopPosition = (_affixTopPosition = {}, (0, _defineProperty2.default)(_affixTopPosition, _enums.AdornmentSide.Left, leftAffixTopPosition), (0, _defineProperty2.default)(_affixTopPosition, _enums.AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, (0, _defineProperty2.default)(_onAffixChange, _enums.AdornmentSide.Left, onLeftAffixLayoutChange), (0, _defineProperty2.default)(_onAffixChange, _enums.AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, (0, _defineProperty2.default)(_topPosition, _enums.AdornmentType.Icon, iconTopPosition), (0, _defineProperty2.default)(_topPosition, _enums.AdornmentType.Affix, affixTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n\n  if (adornmentConfig.length) {\n    adornmentProps = Object.assign({}, adornmentProps, {\n      left: left,\n      right: right,\n      textStyle: Object.assign({}, font, {\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n\n  return React.createElement(_reactNative.View, {\n    style: viewStyle\n  }, React.createElement(Outline, {\n    theme: theme,\n    hasActiveOutline: hasActiveOutline,\n    focused: parentState.focused,\n    activeColor: activeColor,\n    outlineColor: outlineColor,\n    backgroundColor: backgroundColor\n  }), React.createElement(_reactNative.View, null, React.createElement(_reactNative.View, {\n    style: [styles.labelContainer, {\n      paddingTop: LABEL_PADDING_TOP,\n      minHeight: minHeight\n    }]\n  }, React.createElement(_InputLabel.default, {\n    parentState: parentState,\n    labelProps: labelProps,\n    labelBackground: _LabelBackground.default,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  }), render === null || render === void 0 ? void 0 : render(Object.assign({\n    testID: 'text-input-outlined'\n  }, rest, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor || placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: inputHeight\n    } : {}, paddingOut, Object.assign({}, font, {\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      fontVariant: fontVariant,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : _reactNative.I18nManager.isRTL ? 'right' : 'left'\n    }), _reactNative.Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(_TextInputAdornment.default, adornmentProps)));\n};\n\nvar _default = TextInputOutlined;\nexports.default = _default;\n\nvar Outline = function Outline(_ref3) {\n  var theme = _ref3.theme,\n      hasActiveOutline = _ref3.hasActiveOutline,\n      activeColor = _ref3.activeColor,\n      outlineColor = _ref3.outlineColor,\n      focused = _ref3.focused,\n      backgroundColor = _ref3.backgroundColor;\n  return React.createElement(_reactNative.View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: focused ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"mappings":"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","names":["OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","disabled","editable","label","error","selectionColor","_underlineColor","underlineColor","customOutlineColor","outlineColor","activeOutlineColor","dense","style","theme","render","props","React","NativeTextInput","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","adornmentConfig","getAdornmentConfig","colors","fonts","font","regular","hasActiveOutline","focused","StyleSheet","flatten","fontSizeStyle","fontSize","fontWeight","fontVariant","lineHeight","height","backgroundColor","background","textAlign","viewStyle","MAXIMIZED_LABEL_FONT_SIZE","inputTextColor","activeColor","placeholderColor","errorColor","isTransparent","color","alpha","text","rgb","string","primary","placeholder","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","type","AdornmentSide","Left","AdornmentType","Icon","ADORNMENT_SIZE","ADORNMENT_OFFSET","minInputHeight","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputOutlinedDense","inputOutlined","pad","calculatePadding","paddingOut","adjustPaddingOut","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","labeled","measured","labelProps","placeholderStyle","wiggleOffsetX","LABEL_WIGGLE_X_OFFSET","roundness","maxFontSizeMultiplier","minHeight","leftLayout","rightLayout","leftAffixTopPosition","calculateOutlinedIconAndAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","View","Outline","labelContainer","paddingTop","InputLabel","labelBackground","LabelBackground","testID","ref","underlineColorAndroid","input","textAlignVertical","outline","TextInputAdornment","pointerEvents","borderRadius","borderWidth","borderColor","create","position","paddingHorizontal","top","bottom","paddingBottom","flexGrow","margin","zIndex"],"sources":["TextInputOutlined.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, fonts } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    fontVariant,\n    lineHeight,\n    height,\n    backgroundColor = colors.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n  if (disabled) {\n    const isTransparent = color(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = color(colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    LABEL_PADDING_TOP\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor as ColorValue,\n    errorColor,\n    labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        theme={theme}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View>\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              paddingTop: LABEL_PADDING_TOP,\n              minHeight,\n            },\n          ]}\n        >\n          <InputLabel\n            parentState={parentState}\n            labelProps={labelProps}\n            labelBackground={LabelBackground}\n            maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n          />\n          {render?.({\n            testID: 'text-input-outlined',\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : rest.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              !multiline || (multiline && height)\n                ? { height: inputHeight }\n                : {},\n              paddingOut,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                fontVariant,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.isRTL\n                  ? 'right'\n                  : 'left',\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  activeColor: string;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  backgroundColor: ColorValue;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  focused,\n  backgroundColor,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: focused ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}