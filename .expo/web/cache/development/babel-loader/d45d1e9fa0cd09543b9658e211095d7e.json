{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"./TouchableRipple/TouchableRipple\"));\n\nvar _Icon = _interopRequireDefault(require(\"./Icon\"));\n\nvar _CrossFadeIcon = _interopRequireDefault(require(\"./CrossFadeIcon\"));\n\nvar _theming = require(\"../core/theming\");\n\nvar _excluded = [\"icon\", \"color\", \"size\", \"accessibilityLabel\", \"disabled\", \"onPress\", \"animated\", \"theme\", \"style\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar IconButton = function IconButton(_ref) {\n  var icon = _ref.icon,\n      customColor = _ref.color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      _ref$animated = _ref.animated,\n      animated = _ref$animated === void 0 ? false : _ref$animated,\n      theme = _ref.theme,\n      style = _ref.style,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var iconColor = typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  var rippleColor = (0, _color.default)(iconColor).alpha(0.32).rgb().string();\n  var IconComponent = animated ? _CrossFadeIcon.default : _Icon.default;\n  var buttonSize = size * 1.5;\n  return React.createElement(_TouchableRipple.default, _extends({\n    borderless: true,\n    centered: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    style: [styles.container, {\n      width: buttonSize,\n      height: buttonSize,\n      borderRadius: buttonSize / 2\n    }, disabled && styles.disabled, style],\n    accessibilityLabel: accessibilityLabel,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    disabled: disabled,\n    hitSlop: _TouchableRipple.default.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    }\n  }, rest), React.createElement(_reactNative.View, null, React.createElement(IconComponent, {\n    color: iconColor,\n    source: icon,\n    size: size\n  })));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\n\nvar _default = (0, _theming.withTheme)(IconButton);\n\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AACA;;AAQA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA,IAAMA,UAAU,GAAG,SAAbA,UAAa,OAWN;EAAA,IAVXC,IAUW,QAVXA,IAUW;EAAA,IATJC,WASI,QATXC,KASW;EAAA,qBARXC,IAQW;EAAA,IARXA,IAQW,0BARJ,EAQI;EAAA,IAPXC,kBAOW,QAPXA,kBAOW;EAAA,IANXC,QAMW,QANXA,QAMW;EAAA,IALXC,OAKW,QALXA,OAKW;EAAA,yBAJXC,QAIW;EAAA,IAJXA,QAIW,8BAJA,KAIA;EAAA,IAHXC,KAGW,QAHXA,KAGW;EAAA,IAFXC,KAEW,QAFXA,KAEW;EAAA,IADRC,IACQ;EACX,IAAMC,SAAS,GACb,OAAOV,WAAP,KAAuB,WAAvB,GAAqCA,WAArC,GAAmDO,KAAK,CAACI,MAANJ,CAAaK,IADlE;EAEA,IAAMC,WAAW,GAAGZ,oBAAMS,SAANT,EAAiBa,KAAjBb,CAAuB,IAAvBA,EAA6Bc,GAA7Bd,GAAmCe,MAAnCf,EAApB;EACA,IAAMgB,aAAa,GAAGX,QAAQ,GAAGY,sBAAH,GAAmBC,aAAjD;EACA,IAAMC,UAAU,GAAGlB,IAAI,GAAG,GAA1B;EACA,OACEmB,oBAACC,wBAAD;IACEC,UAAU,MADZ;IAEEC,QAAQ,MAFV;IAGEnB,OAAO,EAAEA,OAHX;IAIEQ,WAAW,EAAEA,WAJf;IAKEL,KAAK,EAAE,CACLiB,MAAM,CAACC,SADF,EAEL;MAAEC,KAAK,EAAEP,UAAT;MAAqBQ,MAAM,EAAER,UAA7B;MAAyCS,YAAY,EAAET,UAAU,GAAG;IAApE,CAFK,EAGLhB,QAAQ,IAAIqB,MAAM,CAACrB,QAHd,EAILI,KAJK,CALT;IAWEL,kBAAkB,EAAEA,kBAXtB;IAaE2B,mBAAmB,EAAE1B,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAb3D;IAcE2B,0BAA0B,EAAC,QAd7B;IAeEC,iBAAiB,EAAC,QAfpB;IAgBEC,kBAAkB,EAAE;MAAE7B;IAAF,CAhBtB;IAiBEA,QAAQ,EAAEA,QAjBZ;IAkBE8B,OAAO,EACLZ,yBAAgBa,SAAhBb,GACI;MAAEc,GAAG,EAAE,EAAP;MAAWC,IAAI,EAAE,EAAjB;MAAqBC,MAAM,EAAE,EAA7B;MAAiCC,KAAK,EAAE;IAAxC,CADJjB,GAEI;MAAEc,GAAG,EAAE,CAAP;MAAUC,IAAI,EAAE,CAAhB;MAAmBC,MAAM,EAAE,CAA3B;MAA8BC,KAAK,EAAE;IAArC;EArBR,GAuBM9B,IAvBN,GAyBEY,oBAACmB,iBAAD,QACEnB,oBAACJ,aAAD;IAAehB,KAAK,EAAES,SAAtB;IAAiC+B,MAAM,EAAE1C,IAAzC;IAA+CG,IAAI,EAAEA;EAArD,EADF,CAzBF,CADF;AAjBF;;AAkDA,IAAMuB,MAAM,GAAGiB,wBAAWC,MAAXD,CAAkB;EAC/BhB,SAAS,EAAE;IACTkB,UAAU,EAAE,QADH;IAETC,cAAc,EAAE,QAFP;IAGTC,QAAQ,EAAE,QAHD;IAITC,MAAM,EAAE;EAJC,CADoB;EAO/B3C,QAAQ,EAAE;IACR4C,OAAO,EAAE;EADD;AAPqB,CAAlBN,CAAf;;eAYeO,wBAAUnD,UAAVmD,C","names":["IconButton","icon","customColor","color","size","accessibilityLabel","disabled","onPress","animated","theme","style","rest","iconColor","colors","text","rippleColor","alpha","rgb","string","IconComponent","CrossFadeIcon","Icon","buttonSize","React","TouchableRipple","borderless","centered","styles","container","width","height","borderRadius","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","hitSlop","supported","top","left","bottom","right","View","source","StyleSheet","create","alignItems","justifyContent","overflow","margin","opacity","withTheme"],"sources":["IconButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport color from 'color';\n\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport Icon, { IconSource } from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n\nimport type { $RemoveChildren } from '../types';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color?: string;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const iconColor =\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return (\n    <TouchableRipple\n      borderless\n      centered\n      onPress={onPress}\n      rippleColor={rippleColor}\n      style={[\n        styles.container,\n        { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n        disabled && styles.disabled,\n        style,\n      ]}\n      accessibilityLabel={accessibilityLabel}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n      hitSlop={\n        TouchableRipple.supported\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\n          : { top: 6, left: 6, bottom: 6, right: 6 }\n      }\n      {...rest}\n    >\n      <View>\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6,\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n"]},"metadata":{},"sourceType":"script"}